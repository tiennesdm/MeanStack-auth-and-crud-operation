{"version":3,"sources":["webpack:///./src/app/list/question/component/create/question.component.css","webpack:///./src/app/list/question/component/create/question.component.html","webpack:///./src/app/list/question/component/create/question.component.ts","webpack:///./src/app/list/question/component/listquestion/listquestion.component.css","webpack:///./src/app/list/question/component/listquestion/listquestion.component.html","webpack:///./src/app/list/question/component/listquestion/listquestion.component.ts","webpack:///./src/app/list/question/module/question.module.ts","webpack:///./src/app/list/question/services/question.service.ts"],"names":[],"mappings":"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","file":"list-question-module-question-module.js","sourcesContent":["module.exports = \"mat-form-field,\\ntextarea {\\n  width: 100%;\\n}\\n\\nmat-spinner {\\n  margin: auto;\\n}\\n\\nbutton{\\n  align-self: auto;\\n  margin: auto;\\n\\n}\\n\\n.errors{\\n  padding-top: 10px;\\n  margin-top: 10px;\\n  margin: auto;\\n  color: red;\\n}\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbGlzdC9xdWVzdGlvbi9jb21wb25lbnQvY3JlYXRlL3F1ZXN0aW9uLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0VBRUUsV0FBVztBQUNiOztBQUVBO0VBQ0UsWUFBWTtBQUNkOztBQUNBO0VBQ0UsZ0JBQWdCO0VBQ2hCLFlBQVk7O0FBRWQ7O0FBQ0E7RUFDRSxpQkFBaUI7RUFDakIsZ0JBQWdCO0VBQ2hCLFlBQVk7RUFDWixVQUFVO0FBQ1oiLCJmaWxlIjoic3JjL2FwcC9saXN0L3F1ZXN0aW9uL2NvbXBvbmVudC9jcmVhdGUvcXVlc3Rpb24uY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIm1hdC1mb3JtLWZpZWxkLFxudGV4dGFyZWEge1xuICB3aWR0aDogMTAwJTtcbn1cblxubWF0LXNwaW5uZXIge1xuICBtYXJnaW46IGF1dG87XG59XG5idXR0b257XG4gIGFsaWduLXNlbGY6IGF1dG87XG4gIG1hcmdpbjogYXV0bztcblxufVxuLmVycm9yc3tcbiAgcGFkZGluZy10b3A6IDEwcHg7XG4gIG1hcmdpbi10b3A6IDEwcHg7XG4gIG1hcmdpbjogYXV0bztcbiAgY29sb3I6IHJlZDtcbn1cbiJdfQ== */\"","module.exports = \"<mat-card>\\n  <mat-spinner *ngIf=\\\"isLoading\\\"></mat-spinner>\\n  <form  #f=\\\"ngForm\\\" (ngSubmit)=\\\"onAddQuestion(f)\\\" *ngIf=\\\"!isLoading\\\">\\n      <mat-form-field>\\n          <input matInput  placeholder=\\\"Enter the Question\\\"\\n          name=\\\"question\\\"\\n          question\\n          ngModel\\n          #question=\\\"ngModel\\\"\\n\\n          name=\\\"question\\\" required>\\n\\n       </mat-form-field>\\n\\n       <section>\\n      <mat-checkbox [(ngModel)]=\\\"answerA\\\" name=\\\"answerA\\\">\\n    <mat-form-field>\\n       <input matInput  placeholder=\\\"Option A\\\" required name=\\\"optionA\\\"\\n       [(ngModel)]=\\\"optionA\\\">\\n\\n    </mat-form-field>\\n\\n  </mat-checkbox>\\n  <mat-checkbox [(ngModel)]=\\\"answerB\\\" name=\\\"answerB\\\">\\n    <mat-form-field >\\n      <input matInput  placeholder=\\\"Option B\\\"  [(ngModel)]=\\\"optionB\\\" name=\\\"optionB\\\" required>\\n\\n    </mat-form-field>\\n  </mat-checkbox>\\n  <mat-checkbox [(ngModel)]=\\\"answerC\\\" name=\\\"answerC\\\">\\n      <mat-form-field >\\n        <input matInput  placeholder=\\\"Option C\\\"  [(ngModel)]=\\\"optionC\\\" name=\\\"optionC\\\"required>\\n\\n      </mat-form-field>\\n    </mat-checkbox>\\n    <mat-checkbox [(ngModel)]=\\\"answerD\\\" name=\\\"answerD\\\">\\n        <mat-form-field >\\n          <input matInput  placeholder=\\\"Option D\\\" [(ngModel)]=\\\"optionD\\\" name=\\\"optionD\\\" required>\\n\\n        </mat-form-field>\\n      </mat-checkbox>\\n    </section>\\n    <mat-form-field>\\n      <input matInput name=\\\"email\\\" ngModel type=\\\"email\\\" placeholder=\\\"E-Mail (optional)\\\" #emailInput=\\\"ngModel\\\"  email>\\n      <mat-error *ngIf=\\\"emailInput.invalid\\\">Please enter a valid email.</mat-error>\\n    </mat-form-field>\\n\\n    <button mat-raised-button color=\\\"accent\\\" type=\\\"submit\\\" [disabled]=\\\"!f.valid\\\" >Add Question</button>\\n  </form>\\n  <b class=\\\"errors\\\" *ngIf=\\\"answerArray.length<=0\\\">{{message}}</b>\\n</mat-card>\\n\"","import { Component, OnInit } from '@angular/core';\nimport {FormControl, FormGroupDirective, NgForm, Validators} from '@angular/forms';\nimport {ErrorStateMatcher} from '@angular/material/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { AuthService } from '../../../../auth/auth.service';\nimport {QuestionService} from '../../services/question.service';\nimport { Subscription } from 'rxjs';\nexport class MyErrorStateMatcher implements ErrorStateMatcher {\n  isErrorState(control: FormControl | null, form: FormGroupDirective | NgForm | null): boolean {\n    const isSubmitted = form && form.submitted;\n    return !!(control && control.invalid && (control.dirty || control.touched || isSubmitted));\n  }\n}\n\n@Component({\n  selector: 'app-question',\n  templateUrl: './question.component.html',\n  styleUrls: ['./question.component.css']\n})\nexport class QuestionComponent implements OnInit {\n   optionA = '';\n   optionB = '';\n   optionC = '';\n   optionD = '';\n   answerA: false;\n   answerB: false;\n   answerC: false;\n   answerD: false;\n   questionArray = [];\n   message = '';\n   answerArray = [];\n   isLoading = false;\n   private authStatusSub: Subscription;\n  constructor(\n    public route: ActivatedRoute,\n    private authService: AuthService,\n    private questionService:QuestionService,\n  ) { }\n\n  ngOnInit() {\n    this.authStatusSub = this.authService\n    .getAuthStatusListener()\n    .subscribe(authStatus => {\n      this.isLoading = false;\n    });\n  }\n\n  onAddQuestion(f: NgForm) {\n    if (f.invalid) {\n      return null;\n    }\n\n    console.log('form value', f.value);\n    if(f.value.answerA === true){\n      this.answerArray.push(this.optionA);\n\n\n    } else if (f.value.answerB === true){\n      this.answerArray.push(this.optionB);\n\n\n    } else  if(f.value.answerC === true){\n      this.answerArray.push(this.optionC);\n\n\n    } else if(f.value.answerD === true){\n      this.answerArray.push(this.optionD);\n    }\n    if (this.answerArray.length == 0) {\n\n      this.message= 'Please select the answer';\n      console.log( 'this lenth',this.answerArray.length);\n      console.log('Please a answer for that question');\n      this.questionArray = [];\n    }\n    else{\n      this.isLoading = true;\n\n      this.questionArray.push(f.value.optionA, f.value.optionB, f.value.optionC, f.value.optionD);\n      this.questionService.addQuestion(f.value.question, this.questionArray, this.answerArray,f.value.email);\n      console.log(this.questionArray);\n      this.message = '' ;\n      this.answerArray = [];\n      this.questionArray = [];\n      f.reset();\n\n      f.resetForm();\n      setTimeout((\n\n        )=> { this.isLoading = false;},3000);\n    }\n    }\n\n}\n","module.exports = \"table {\\n  width: 100%;\\n}\\nmat-spinner {\\n  margin: auto;\\n}\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvbGlzdC9xdWVzdGlvbi9jb21wb25lbnQvbGlzdHF1ZXN0aW9uL2xpc3RxdWVzdGlvbi5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsV0FBVztBQUNiO0FBQ0E7RUFDRSxZQUFZO0FBQ2QiLCJmaWxlIjoic3JjL2FwcC9saXN0L3F1ZXN0aW9uL2NvbXBvbmVudC9saXN0cXVlc3Rpb24vbGlzdHF1ZXN0aW9uLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJ0YWJsZSB7XG4gIHdpZHRoOiAxMDAlO1xufVxubWF0LXNwaW5uZXIge1xuICBtYXJnaW46IGF1dG87XG59XG4iXX0= */\"","module.exports = \"<mat-spinner *ngIf=\\\"isLoading\\\"></mat-spinner>\\n    <table mat-table [dataSource]=\\\"dataSource\\\" class=\\\"mat-elevation-z8\\\">\\n        <!-- Question Column -->\\n        <ng-container matColumnDef=\\\"Question\\\">\\n          <th mat-header-cell *matHeaderCellDef> Question </th>\\n          <td mat-cell *matCellDef=\\\"let element\\\"> {{element}} </td>\\n        </ng-container>\\n        <!-- Option A Column -->\\n        <ng-container matColumnDef=\\\"Option A\\\">\\n          <th mat-header-cell *matHeaderCellDef> Option A </th>\\n          <td mat-cell *matCellDef=\\\"let element\\\"> {{element.optionId.option[0]}} </td>\\n        </ng-container>\\n           <!-- Option B Column -->\\n        <ng-container matColumnDef=\\\"Option B\\\">\\n          <th mat-header-cell *matHeaderCellDef> Option B</th>\\n          <td mat-cell *matCellDef=\\\"let element\\\"> {{element.optionId.option[1]}} </td>\\n        </ng-container>\\n          <!-- Option C Column -->\\n        <ng-container matColumnDef=\\\"Option C\\\">\\n          <th mat-header-cell *matHeaderCellDef> Option C</th>\\n          <td mat-cell *matCellDef=\\\"let element\\\"> {{element.optionId.option[2]}} </td>\\n        </ng-container>\\n            <!-- Option D Column -->\\n        <ng-container matColumnDef=\\\"Option D\\\">\\n          <th mat-header-cell *matHeaderCellDef> Option D</th>\\n          <td mat-cell *matCellDef=\\\"let element\\\"> {{element.optionId.option[3]}} </td>\\n        </ng-container>\\n        <!-- Answer Column -->\\n        <ng-container matColumnDef=\\\"Answer\\\">\\n          <th mat-header-cell *matHeaderCellDef> Answer </th>\\n          <td mat-cell *matCellDef=\\\"let element\\\"> {{element.answerId.answer}} </td>\\n        </ng-container>\\n        <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n        <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n      </table>\\n\\n\\n\\n\"","import { Component, OnInit } from '@angular/core';\nimport { NgForm, ValidationErrors, Validator } from '@angular/forms';\nimport { ActivatedRoute } from '@angular/router';\nimport {QuestionService} from '../../services/question.service';\nimport {Question} from '../../model/question.model';\nimport {\n  MatSnackBar,\n  MatPaginator,\n  MatSort,\n  MatTableDataSource\n} from '@angular/material';\n\n@Component({\n  selector: 'app-listquestion',\n  templateUrl: './listquestion.component.html',\n  styleUrls: ['./listquestion.component.css']\n})\nexport class ListquestionComponent implements OnInit {\n  isLoading = false;\n  dataSource = new MatTableDataSource<Question>();\n\n  question:Question[] = [];\n\n  displayedColumns: string[] = ['Question', 'Option A', 'Option B', 'Option C', 'Option D', 'Answer'];\n // dataSource = ELEMENT_DATA;\n  constructor( private questionService: QuestionService) { }\n\n  ngOnInit() {\n    this.questionService.getQuestions().subscribe(result=>\n      {//console.log(data);\n        this.isLoading  = true;\n      // let data2 = data.i\n      this.dataSource.data = result;\n      this.isLoading = false;\n    //  console.log(dataSource);\n      console.log(this.dataSource.data);\n    //  this.dataSource = data;\nconsole.log(this.dataSource);\n      }\n      );\n\n  }\n\n}\n","import { NgModule ,  CUSTOM_ELEMENTS_SCHEMA} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AngularMaterialForm } from '../../../angular-material.module';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\nimport {QuestionComponent} from '../component/create/question.component';\nimport { AuthGuard } from '../../.../../../auth/auth.guard';\nimport {ListquestionComponent} from '../component/listquestion/listquestion.component';\n\n\nconst routes: Routes = [\n  {path: '', component: QuestionComponent, canActivate: [AuthGuard]},\n  {path: 'list', component: ListquestionComponent, canActivate: [AuthGuard]}\n];\n@NgModule({\n  declarations: [\n    QuestionComponent,\n    ListquestionComponent,\n\n\n  ],\n  exports:[\n    QuestionComponent,\n    ListquestionComponent\n  ],\n  imports: [\n    CommonModule,\n    AngularMaterialForm,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule.forChild(routes)\n\n  ]\n})\nexport class QuestionModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport {Question} from '../model/question.model';\nimport { Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { from } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from '../../../../environments/environment';\n\nconst BACKEND_URL = environment.apiUrl;\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class QuestionService {\n\n\n  constructor(private http: HttpClient, private router: Router) { }\n  addQuestion(question: string, option: Array<string>, answer: Array<string>, email: string) {\n    const postData: Question = {id: null, question:question, option:option, answer: answer,  creator: null, email: email};\n    console.log('serviceData', postData);\n     this.http\n       .post<{ message: string; }>(\n        BACKEND_URL + '/addquestion/',\n         postData\n       )\n       .subscribe(responseData => {\n         alert(responseData.message);\n         this.router.navigate(['/']);\n       });\n   }\ngetQuestions(): Observable<Question[]> {\n  return this.http.get<Question[]>(BACKEND_URL + '/addquestion/getQuestion');\n}\n}\n"],"sourceRoot":""}